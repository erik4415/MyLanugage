/*  This is a JLex specification for a small subset of CSX tokens.
    Expand it to handle all CSX tokens as part of your solution for project 2 */


import java_cup.runtime.*;



class CSXToken {
	int linenum;
	int colnum;
	CSXToken(int line,int col){
		linenum=line;colnum=col;};
}

class CSXIntLitToken extends CSXToken {
	int intValue;
	CSXIntLitToken(int val,int line,int col){
		super(line,col);intValue=val;};
}

class CSXIdentifierToken extends CSXToken {
	String identifierText;
	CSXIdentifierToken(String text,int line,int col){
		super(line,col);identifierText=text;};
}

class CSXCharLitToken extends CSXToken {
	char charValue;
	CSXCharLitToken(char val,int line,int col){
		super(line,col);charValue=val;};
}

class CSXStringLitToken extends CSXToken {
	String stringText; // Full text of string literal,
                          //  including quotes & escapes
	CSXStringLitToken(String text,int line,int col){
		super(line,col);
		stringText=text;
	};
}

// This class is used to track line and column numbers
// Please feel free to change or extend it

class Pos {
	static int  linenum = 1; /* maintain this as line number current
                                 token was scanned on */
	static int  colnum = 1; /* maintain this as column number current
                                 token began at */
	static int  line = 1; /* maintain this as line number after
					scanning current token  */
	static int  col = 1; /* maintain this as column number after
					scanning current token  */
	static void setpos() { // set starting position for current token
		linenum = line;
		colnum = col;
	}
}

%%
Digit=[0-9]
AnyLet=[a-zA-Z]
whiteSpace=[\040\t\n]
extraSymbols=[!-~]



%state COMMENT

// Tell JLex to have yylex() return a Symbol, as JavaCUP will require
%type Symbol

// Tell JLex what to return when eof of file is hit
%eofval{
return new Symbol(sym.EOF, new CSXToken(0,0));
%eofval}

%%


<YYINITIAL>"+"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.PLUS,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>"!="	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.NOTEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>";"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.SEMI,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>"(" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LPAREN,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>")" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RPAREN,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>"[" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LBRACKET,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>"]" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RBRACKET,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>"=" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.ASG,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>"-" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.MINUS,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>"*" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.TIMES,
			new CSXToken(Pos.linenum,Pos.colnum));}
			
<YYINITIAL>"/" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.SLASH,
			new CSXToken(Pos.linenum,Pos.colnum));}			
<YYINITIAL>"==" {Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.EQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>"&&" {Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.CAND,
			new CSXToken(Pos.linenum,Pos.colnum));}


<YYINITIAL>"||" {Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.COR,
			new CSXToken(Pos.linenum,Pos.colnum));}		

<YYINITIAL>"," {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.COMMA,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>"!" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.NOT,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>"{" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LBRACE,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>"}" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RBRACE,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>":" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.COLON,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>"++" {Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.INCREMENT,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>"--" {Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.DECREMENT,
			new CSXToken(Pos.linenum,Pos.colnum));}	
			
<YYINITIAL>"<" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LT,
			new CSXToken(Pos.linenum,Pos.colnum));}	

<YYINITIAL>">" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.GT,
			new CSXToken(Pos.linenum,Pos.colnum));}	

<YYINITIAL>"<=" {Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.LEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}	

<YYINITIAL>">=" {Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.GEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}	

<YYINITIAL>([B|b][o|O][o|O][l|L]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>([B|b][r|R][e|E][a|A][k|K]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_BREAK,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>([c|C][h|H][a|A][r|R]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CHAR,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>([c|C][l|L][a|A][s|S][s|S]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CLASS,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>([c|C][o|O][n|N][s|S][t|T]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CONST,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>([c|C][o|O][n|N][t|T][i|I][n|N][u|U][e|E]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CONTINUE,
			new CSXToken(Pos.linenum,Pos.colnum));}		
<YYINITIAL>([e|E][l|L][s|S][e|E]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_ELSE,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>([f|F][a|A][l|L][s|S][e|E]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_FALSE,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>([i|I][f|F]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_IF,
			new CSXToken(Pos.linenum,Pos.colnum));}		
<YYINITIAL>([i|I][n|N][t|T]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_INT,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>([p|P][r|R][i|I][n|N][t|T]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_PRINT,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>[r|R][e|E][a|A][d|D]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_READ,
			new CSXToken(Pos.linenum,Pos.colnum));}	
<YYINITIAL>[r|R][e|E][t|T][u|U][r|R][n|N] {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_RETURN,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>([t|T][r|R][u|U][e|E]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_TRUE,
			new CSXToken(Pos.linenum,Pos.colnum));}
<YYINITIAL>([v|V][o|O][i|I][d|D]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_VOID,
			new CSXToken(Pos.linenum,Pos.colnum));}	
<YYINITIAL>([w|W][h|H][i|I][l|L][e|E]) {Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_WHILE,
			new CSXToken(Pos.linenum,Pos.colnum));}
			
<YYINITIAL>(~{Digit}+)|({Digit}+) {

			Double c;
			double d;
			int e = 0;
			char one = yytext().charAt(0);
			if(one == '~'){
				
				c = new Double(yytext().substring(1,yytext().length()));
				d = 0 - c.doubleValue();
			
			}
			else{
			 c = new Double(yytext());
			 d = c.doubleValue();
			 }
			 		 
			if (d > Integer.MAX_VALUE){
			
				
				System.out.println("Error: Integer literal " + yytext() + " too large; replaced with 2147483647");
				e = Integer.MAX_VALUE;
			}			
			else if (d < Integer.MIN_VALUE){
			
				System.out.println("Error: Integer literal " + yytext() + " too small; replaced with -2147483648");
			
				e = Integer.MIN_VALUE;
			}			
			else {
				
				e = (int) d;
			}
		  Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.INTLIT,new CSXIntLitToken(e,Pos.linenum,Pos.colnum));}
		                    	
<YYINITIAL>{AnyLet}({AnyLet}|{Digit})* {Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}

<YYINITIAL>'({AnyLet}|\\n|\\t|\\'|\\\\)' {
	char ch;

	if(yytext().equals("'\\t'")){
		ch = '\t';
	}

	else if(yytext().equals("'\\n'")){
		ch = '\n';
	}

	else if(yytext().equals("'\\\\'")){
		ch= '\\';
	}

	else if(yytext().equals("'\\''")){
		ch='\'';
	}

	else {
		ch= yytext().charAt(1); 

}
Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.CHARLIT,new CSXCharLitToken(ch,Pos.linenum,Pos.colnum));}

<YYINITIAL>\"(\\.|[^\n\"])*\" {Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.STRLIT,new CSXStringLitToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}        	

<YYINITIAL>//.* {Pos.col = 1;}


<YYINITIAL>"##" { yybegin(COMMENT); Pos.col +=2;}

<COMMENT>[^#] {


if (yytext().equals("\n")){ Pos.line +=1; Pos.col = 1;}

else {Pos.col += yytext().length();}

}

<COMMENT>"#"[^#] {Pos.col += 2;}

<COMMENT>"##" { yybegin(YYINITIAL); Pos.col += 2;}


<YYINITIAL>\n { Pos.line += 1; Pos.col = 1;}

<YYINITIAL>" "	{Pos.col +=1;}

<YYINITIAL>\t {Pos.col +=1;}

<YYINITIAL>. {Pos.col += yytext().length(); return new Symbol(sym.error,
				new CSXStringLitToken(yytext(),
		                    	Pos.linenum,Pos.colnum));} 

[\000-\037\177] {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.error,
			new CSXToken(Pos.linenum,Pos.colnum));}

