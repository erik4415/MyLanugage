/*  This is a JLex specification for a small subset of CSX tokens.
    Expand it to handle all CSX tokens as part of your solution for project 2 */
import java_cup.runtime.*;
class CSXToken {
	int linenum;
	int colnum;
	CSXToken(int line,int col){
		linenum=line;colnum=col;};
}
class CSXIntLitToken extends CSXToken {
	int intValue;
	CSXIntLitToken(int val,int line,int col){
		super(line,col);intValue=val;};
}
class CSXIdentifierToken extends CSXToken {
	String identifierText;
	CSXIdentifierToken(String text,int line,int col){
		super(line,col);identifierText=text;};
}
class CSXCharLitToken extends CSXToken {
	char charValue;
	CSXCharLitToken(char val,int line,int col){
		super(line,col);charValue=val;};
}
class CSXStringLitToken extends CSXToken {
	String stringText; // Full text of string literal,
                          //  including quotes & escapes
	CSXStringLitToken(String text,int line,int col){
		super(line,col);
		stringText=text;
	};
}
// This class is used to track line and column numbers
// Please feel free to change or extend it
class Pos {
	static int  linenum = 1; /* maintain this as line number current
                                 token was scanned on */
	static int  colnum = 1; /* maintain this as column number current
                                 token began at */
	static int  line = 1; /* maintain this as line number after
					scanning current token  */
	static int  col = 1; /* maintain this as column number after
					scanning current token  */
	static void setpos() { // set starting position for current token
		linenum = line;
		colnum = col;
	}
}


class Yylex {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final char YYEOF = '\uFFFF';
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yy_lexical_state;

	Yylex (java.io.Reader reader) {
		this ();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	Yylex (java.io.InputStream instream) {
		this ();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}

	private Yylex () {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yy_lexical_state = YYINITIAL;
	}

	private boolean yy_eof_done = false;
	private final int YYINITIAL = 0;
	private final int COMMENT = 1;
	private final int yy_state_dtrans[] = {
		0,
		187
	};
	private void yybegin (int state) {
		yy_lexical_state = state;
	}
	private char yy_advance ()
		throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YYEOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YYEOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	private void yy_move_start () {
		++yy_buffer_start;
	}
	private void yy_pushback () {
		--yy_buffer_end;
	}
	private void yy_mark_start () {
		yy_buffer_start = yy_buffer_index;
	}
	private void yy_mark_end () {
		yy_buffer_end = yy_buffer_index;
	}
	private void yy_to_mark () {
		yy_buffer_index = yy_buffer_end;
	}
	private java.lang.String yytext () {
		return (new java.lang.String(yy_buffer,
			yy_buffer_start,
			yy_buffer_end - yy_buffer_start));
	}
	private int yylength () {
		return yy_buffer_end - yy_buffer_start;
	}
	private char[] yy_double (char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2*buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = {
		"Error: Internal error.\n",
		"Error: Unmatched input.\n"
	};
	private void yy_error (int code,boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	private int yy_acpt[] = {
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NO_ANCHOR,
		YY_NOT_ACCEPT,
		YY_NO_ANCHOR
	};
	private int yy_cmap[] = {
		0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 2, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0,
		3, 4, 5, 6, 0, 0, 7, 8,
		9, 10, 11, 12, 13, 14, 0, 15,
		16, 16, 16, 16, 16, 16, 16, 16,
		16, 16, 17, 18, 19, 20, 21, 0,
		0, 22, 23, 24, 25, 26, 27, 28,
		29, 30, 28, 31, 32, 28, 33, 34,
		35, 28, 36, 37, 38, 39, 40, 41,
		28, 28, 28, 42, 43, 44, 0, 0,
		0, 22, 23, 24, 25, 26, 27, 28,
		29, 30, 28, 31, 32, 28, 45, 34,
		35, 28, 36, 37, 46, 39, 40, 41,
		28, 28, 28, 47, 48, 49, 50, 0
		
	};
	private int yy_rmap[] = {
		0, 1, 1, 1, 1, 2, 1, 1,
		1, 3, 1, 4, 5, 6, 1, 1,
		7, 8, 9, 10, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 11, 1,
		1, 1, 10, 12, 1, 10, 10, 10,
		10, 10, 10, 10, 10, 10, 10, 10,
		10, 10, 10, 10, 1, 1, 1, 13,
		13, 14, 13, 15, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 16, 17, 18, 1, 19,
		20, 21, 21, 22, 23, 24, 25, 26,
		26, 27, 28, 29, 30, 31, 32, 33,
		34, 35, 36, 37, 37, 38, 39, 40,
		41, 42, 6, 43, 44, 45, 46, 47,
		48, 49, 50, 51, 52, 53, 54, 55,
		56, 57, 15, 58, 59, 60, 61, 62,
		63, 64, 65, 66, 67, 68, 69, 70,
		71, 72, 73, 74, 75, 76, 77, 78,
		79, 80, 81, 82, 83, 84, 85, 86,
		87, 88, 89, 90, 91, 92, 93, 94,
		95, 96, 97, 98, 99, 100, 101, 102,
		103, 104, 20, 105, 21, 106, 32, 107,
		108, 109, 110, 111, 22, 37, 112, 26,
		113, 27, 114, 115, 116, 117, 118, 119,
		120, 121, 122, 19, 123, 124, 125, 126,
		127, 128 
	};
	private int yy_nxt[][] = {
		{ 1, 2, 3, 4, 5, 56, 76, 91,
			97, 6, 7, 8, 9, 10, 11, 12,
			13, 14, 15, 16, 17, 18, 19, 57,
			77, 19, 92, 98, 19, 19, 103, 19,
			19, 19, 19, 107, 109, 19, 190, 19,
			111, 113, 20, 1, 21, 19, 190, 22,
			102, 23, 106 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, 24, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, 28, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 29, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, 30,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			13, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, 31, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, 32, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, 33, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			-1, -1, -1 
		},
		{ 30, 30, -1, 30, 30, 30, 30, 30,
			30, 30, 30, 30, 30, 30, 30, 30,
			30, 30, 30, 30, 30, 30, 30, 30,
			30, 30, 30, 30, 30, 30, 30, 30,
			30, 30, 30, 30, 30, 30, 30, 30,
			30, 30, 30, 30, 30, 30, 30, 30,
			30, 30, 30 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 166, -1,
			-1, -1, 130, -1, -1, -1, 168, -1,
			144, 136, 128, -1, -1, 142, 79, 152,
			-1, -1, -1, -1, -1, 136, 79, -1,
			93, -1, -1 
		},
		{ 55, 55, -1, 55, 55, 25, 55, 55,
			55, 55, 55, 55, 55, 55, 55, 55,
			55, 55, 55, 55, 55, 55, 55, 55,
			55, 55, 55, 55, 55, 55, 55, 55,
			55, 55, 55, 55, 55, 55, 55, 55,
			55, 55, 55, 75, 55, 55, 55, 55,
			55, 55, 55 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 193, 19, 192, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			101, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 60, -1,
			-1, -1, -1, -1, -1, -1, 60, -1,
			60, -1, -1 
		},
		{ 55, 55, -1, 55, 55, 58, 55, 55,
			55, 55, 55, 55, 55, 55, 55, 55,
			55, 55, 55, 55, 55, 55, 55, 55,
			55, 55, 55, 55, 55, 55, 55, 55,
			55, 55, 55, 55, 55, 55, 55, 55,
			55, 55, 55, 75, 55, 55, 55, 55,
			55, 55, 55 
		},
		{ -1, -1, -1, -1, -1, -1, 26, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 189, 19, 19,
			199, 19, 115, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			105, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, 180,
			-1, -1, -1, -1, -1, -1, -1, -1,
			180, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, 67,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			67, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 68, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			68, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, 184, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			184, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, 67,
			-1, -1, -1, -1, -1, -1, 71, -1,
			-1, -1, -1, -1, -1, -1, 71, -1,
			67, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, 72, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 71, -1,
			-1, -1, -1, -1, -1, -1, 71, -1,
			71, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, 89, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 89, -1, -1,
			89, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, 185, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 185, -1, -1,
			185, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, 186,
			-1, -1, -1, -1, -1, -1, -1, -1,
			186, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			36, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, 27,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			117, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			108, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 170, -1,
			-1, 64, 63, -1, -1, -1, -1, -1,
			99, 179, -1, -1, 62, 182, 176, 180,
			-1, -1, -1, -1, -1, 179, 176, -1,
			104, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 183, -1,
			-1, -1, -1, -1, -1, -1, 69, -1,
			-1, -1, -1, -1, -1, -1, 69, -1,
			88, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 183, -1,
			-1, -1, -1, -1, -1, 68, 69, -1,
			-1, -1, -1, -1, -1, -1, 69, -1,
			87, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			90, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, 90, -1, 90, 90, -1,
			-1, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 90, 90,
			90, 90, 90, 90, 90, 90, 90, 90,
			90, 90, 90, 90, 90, 90, 90, 90,
			90, 90, -1, 96, -1, 90, 90, -1,
			-1, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 119, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			110, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, 72, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			72, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, 130, -1, -1, -1, -1, -1,
			-1, -1, 128, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			132, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 110, -1,
			-1, -1, 114, 78, -1, 118, -1, -1,
			120, 122, 124, -1, 126, -1, -1, -1,
			-1, -1, -1, -1, -1, 122, -1, -1,
			35, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 34, 19, 19, 19, 19,
			19, 121, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 121, 19, -1,
			59, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, 70, -1, -1, -1, 183, 67,
			-1, -1, -1, -1, 184, 68, 69, -1,
			-1, -1, -1, -1, -1, -1, 69, -1,
			86, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 138, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, 136, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 136, -1, -1,
			140, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 123, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			112, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 142, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			142, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 125, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			114, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			144, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			144, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 197, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			194, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 146, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			146, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 201, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			200, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 150, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 195, -1,
			-1, -1, -1, -1, -1, -1, 195, -1,
			148, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 135, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 135, 19, -1,
			136, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, 152,
			-1, -1, -1, -1, -1, -1, -1, -1,
			152, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 137, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			142, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 134, -1,
			-1, -1, -1, -1, -1, -1, 156, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			158, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			139, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			144, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 191, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 142, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			160, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 37, 19,
			19, 19, -1, -1, -1, 19, 37, -1,
			60, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 141, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			146, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 154, -1,
			-1, 136, 128, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 136, -1, -1,
			162, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 143, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 198, 19,
			19, 19, -1, -1, -1, 19, 198, -1,
			148, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, 130, -1, -1, -1, 146, -1,
			-1, -1, -1, -1, -1, -1, -1, 152,
			-1, -1, -1, -1, -1, -1, -1, -1,
			164, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 145,
			19, 19, -1, -1, -1, 19, 19, -1,
			152, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			61, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			61, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			38, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			61, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 170, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			170, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 151, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			170, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 170, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			61, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			80, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 39, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			62, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, 62, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			62, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 155, 157, 19,
			19, 19, -1, -1, -1, 19, 157, -1,
			174, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 175, 176, -1,
			-1, -1, -1, -1, -1, -1, 176, -1,
			174, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 40, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			63, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, 62, 172, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			81, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 159, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			178, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, 62, 177, 176, -1,
			-1, -1, -1, -1, -1, -1, 176, -1,
			95, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 161, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 161, 19, -1,
			179, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, 63, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			63, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 41, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			64, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 178, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			178, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 42, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			65, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, 179, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 179, -1, -1,
			179, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 43, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			66, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, 64, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, 180,
			-1, -1, -1, -1, -1, -1, -1, -1,
			83, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			165, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			181, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, 64, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			64, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 44,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			67, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, 65, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			65, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 45, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			68, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, 66, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			66, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 46, 19,
			19, 19, -1, -1, -1, 19, 46, -1,
			69, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			181, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			181, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 167, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			183, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			181, -1, -1, -1, 62, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			100, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 47, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			70, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, 63, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 172, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			82, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 48, 19,
			19, 19, -1, -1, -1, 19, 48, -1,
			71, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, 66, -1, -1, -1, -1, -1, -1,
			61, -1, -1, -1, -1, 175, 176, -1,
			-1, -1, -1, -1, -1, -1, 176, -1,
			94, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 169, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			184, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 170, -1,
			-1, -1, 65, -1, -1, -1, -1, -1,
			-1, 179, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 179, -1, -1,
			84, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 49, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			72, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, 64, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, 62, 172, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			81, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 171, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 171, 19, -1,
			185, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, 66, -1, -1, -1, -1, -1, -1,
			181, 179, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 179, -1, -1,
			85, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 50, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 50, 19, -1,
			73, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 173,
			19, 19, -1, -1, -1, 19, 19, -1,
			186, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 51, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			74, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 69, -1,
			-1, -1, -1, -1, -1, -1, 69, -1,
			69, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 183, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			183, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 68, 69, -1,
			-1, -1, -1, -1, -1, -1, 69, -1,
			68, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, 70, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			70, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 71, -1,
			-1, -1, -1, -1, -1, -1, 71, -1,
			71, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, 70, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 68, 69, -1,
			-1, -1, -1, -1, -1, -1, 69, -1,
			68, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, 73, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 73, -1, -1,
			73, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, 74, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			74, -1, -1 
		},
		{ 52, 52, 52, 52, 52, 52, 188, 52,
			52, 52, 52, 52, 52, 52, 52, 52,
			52, 52, 52, 52, 52, 52, 52, 52,
			52, 52, 52, 52, 52, 52, 52, 52,
			52, 52, 52, 52, 52, 52, 52, 52,
			52, 52, 52, 52, 52, 52, 52, 52,
			52, 52, 52 
		},
		{ 53, 53, 53, 53, 53, 53, 54, 53,
			53, 53, 53, 53, 53, 53, 53, 53,
			53, 53, 53, 53, 53, 53, 53, 53,
			53, 53, 53, 53, 53, 53, 53, 53,
			53, 53, 53, 53, 53, 53, 53, 53,
			53, 53, 53, 53, 53, 53, 53, 53,
			53, 53, 53 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 133, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			134, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 127, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			116, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, 172, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			172, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 131, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			130, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 129, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			128, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 154, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			154, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 153, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			172, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 147, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			154, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 163,
			19, 19, -1, -1, -1, 19, 19, -1,
			180, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 196, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			191, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, 156, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			156, -1, -1 
		},
		{ -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1,
			19, -1, -1, -1, -1, -1, 19, 19,
			19, 19, 19, 19, 19, 19, 149, 19,
			19, 19, 19, 19, 19, 19, 19, 19,
			19, 19, -1, -1, -1, 19, 19, -1,
			156, -1, -1 
		}
	};
	public Symbol yylex ()
		throws java.io.IOException {
		char yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			if (YYEOF != yy_lookahead) {
				yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			}
			else {
				if (YYEOF == yy_lookahead && true == yy_initial) {

return new Symbol(sym.EOF, new CSXToken(0,0));
				}
				else if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				}
				else {
					yy_to_mark();
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_pushback();
					}
					if (0 != (YY_START & yy_anchor)) {
						yy_move_start();
					}
					switch (yy_last_accept_state) {
					case 1:
						{Pos.col += yytext().length(); return new Symbol(sym.error,
				new CSXStringLitToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -2:
						break;
					case 2:
						{Pos.col +=1;}
					case -3:
						break;
					case 3:
						{ Pos.line += 1; Pos.col = 1;}
					case -4:
						break;
					case 4:
						{Pos.col +=1;}
					case -5:
						break;
					case 5:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.NOT,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -6:
						break;
					case 6:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LPAREN,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -7:
						break;
					case 7:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RPAREN,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -8:
						break;
					case 8:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.TIMES,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -9:
						break;
					case 9:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.PLUS,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -10:
						break;
					case 10:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.COMMA,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -11:
						break;
					case 11:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.MINUS,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -12:
						break;
					case 12:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.SLASH,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -13:
						break;
					case 13:
						{
			Double c;
			double d;
			int e = 0;
			char one = yytext().charAt(0);
			if(one == '~'){
				c = new Double(yytext().substring(1,yytext().length()));
				d = 0 - c.doubleValue();
			}
			else{
			 c = new Double(yytext());
			 d = c.doubleValue();
			 }
			if (d > Integer.MAX_VALUE){
				System.out.println("Error: Integer literal " + yytext() + " too large; replaced with 2147483647");
				e = Integer.MAX_VALUE;
			}			
			else if (d < Integer.MIN_VALUE){
				System.out.println("Error: Integer literal " + yytext() + " too small; replaced with -2147483648");
				e = Integer.MIN_VALUE;
			}			
			else {
				e = (int) d;
			}
		  Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.INTLIT,new CSXIntLitToken(e,Pos.linenum,Pos.colnum));}
					case -14:
						break;
					case 14:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.COLON,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -15:
						break;
					case 15:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.SEMI,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -16:
						break;
					case 16:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LT,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -17:
						break;
					case 17:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.ASG,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -18:
						break;
					case 18:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.GT,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -19:
						break;
					case 19:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -20:
						break;
					case 20:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LBRACKET,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -21:
						break;
					case 21:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RBRACKET,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -22:
						break;
					case 22:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LBRACE,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -23:
						break;
					case 23:
						{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RBRACE,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -24:
						break;
					case 24:
						{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.NOTEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -25:
						break;
					case 25:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.STRLIT,new CSXStringLitToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -26:
						break;
					case 26:
						{ yybegin(COMMENT); Pos.col +=2;}
					case -27:
						break;
					case 27:
						{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.CAND,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -28:
						break;
					case 28:
						{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.INCREMENT,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -29:
						break;
					case 29:
						{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.DECREMENT,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -30:
						break;
					case 30:
						{Pos.col = 1;}
					case -31:
						break;
					case 31:
						{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.LEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -32:
						break;
					case 32:
						{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.EQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -33:
						break;
					case 33:
						{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.GEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -34:
						break;
					case 34:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_IF,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -35:
						break;
					case 35:
						{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.COR,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -36:
						break;
					case 36:
						{
	char ch;
	if(yytext().equals("'\\t'")){
		ch = '\t';
	}
	else if(yytext().equals("'\\n'")){
		ch = '\n';
	}
	else if(yytext().equals("'\\\\'")){
		ch= '\\';
	}
	else if(yytext().equals("'\\''")){
		ch='\'';
	}
	else {
		ch= yytext().charAt(1); 
}
Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.CHARLIT,new CSXCharLitToken(ch,Pos.linenum,Pos.colnum));}
					case -37:
						break;
					case 37:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_INT,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -38:
						break;
					case 38:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -39:
						break;
					case 39:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CHAR,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -40:
						break;
					case 40:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_ELSE,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -41:
						break;
					case 41:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_READ,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -42:
						break;
					case 42:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_TRUE,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -43:
						break;
					case 43:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_VOID,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -44:
						break;
					case 44:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_BREAK,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -45:
						break;
					case 45:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CLASS,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -46:
						break;
					case 46:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CONST,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -47:
						break;
					case 47:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_FALSE,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -48:
						break;
					case 48:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_PRINT,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -49:
						break;
					case 49:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_WHILE,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -50:
						break;
					case 50:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_RETURN,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -51:
						break;
					case 51:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CONTINUE,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -52:
						break;
					case 52:
						{
if (yytext().equals("\n")){ Pos.line +=1; Pos.col = 1;}
else {Pos.col += yytext().length();}
}
					case -53:
						break;
					case 53:
						{Pos.col += 2;}
					case -54:
						break;
					case 54:
						{ yybegin(YYINITIAL); Pos.col += 2;}
					case -55:
						break;
					case 56:
						{Pos.col += yytext().length(); return new Symbol(sym.error,
				new CSXStringLitToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -56:
						break;
					case 57:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -57:
						break;
					case 58:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.STRLIT,new CSXStringLitToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -58:
						break;
					case 59:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_IF,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -59:
						break;
					case 60:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_INT,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -60:
						break;
					case 61:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -61:
						break;
					case 62:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CHAR,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -62:
						break;
					case 63:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_ELSE,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -63:
						break;
					case 64:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_READ,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -64:
						break;
					case 65:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_TRUE,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -65:
						break;
					case 66:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_VOID,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -66:
						break;
					case 67:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_BREAK,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -67:
						break;
					case 68:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CLASS,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -68:
						break;
					case 69:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CONST,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -69:
						break;
					case 70:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_FALSE,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -70:
						break;
					case 71:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_PRINT,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -71:
						break;
					case 72:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_WHILE,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -72:
						break;
					case 73:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_RETURN,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -73:
						break;
					case 74:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CONTINUE,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -74:
						break;
					case 76:
						{Pos.col += yytext().length(); return new Symbol(sym.error,
				new CSXStringLitToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -75:
						break;
					case 77:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -76:
						break;
					case 78:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_IF,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -77:
						break;
					case 79:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_INT,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -78:
						break;
					case 80:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -79:
						break;
					case 81:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CHAR,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -80:
						break;
					case 82:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_ELSE,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -81:
						break;
					case 83:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_READ,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -82:
						break;
					case 84:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_TRUE,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -83:
						break;
					case 85:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_VOID,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -84:
						break;
					case 86:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_BREAK,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -85:
						break;
					case 87:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CLASS,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -86:
						break;
					case 88:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CONST,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -87:
						break;
					case 89:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_RETURN,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -88:
						break;
					case 91:
						{Pos.col += yytext().length(); return new Symbol(sym.error,
				new CSXStringLitToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -89:
						break;
					case 92:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -90:
						break;
					case 93:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_INT,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -91:
						break;
					case 94:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -92:
						break;
					case 95:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CHAR,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -93:
						break;
					case 97:
						{Pos.col += yytext().length(); return new Symbol(sym.error,
				new CSXStringLitToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -94:
						break;
					case 98:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -95:
						break;
					case 99:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -96:
						break;
					case 100:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_CHAR,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -97:
						break;
					case 102:
						{Pos.col += yytext().length(); return new Symbol(sym.error,
				new CSXStringLitToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -98:
						break;
					case 103:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -99:
						break;
					case 104:
						{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos.linenum,Pos.colnum));}
					case -100:
						break;
					case 106:
						{Pos.col += yytext().length(); return new Symbol(sym.error,
				new CSXStringLitToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -101:
						break;
					case 107:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -102:
						break;
					case 109:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -103:
						break;
					case 111:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -104:
						break;
					case 113:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -105:
						break;
					case 115:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -106:
						break;
					case 117:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -107:
						break;
					case 119:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -108:
						break;
					case 121:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -109:
						break;
					case 123:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -110:
						break;
					case 125:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -111:
						break;
					case 127:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -112:
						break;
					case 129:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -113:
						break;
					case 131:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -114:
						break;
					case 133:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -115:
						break;
					case 135:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -116:
						break;
					case 137:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -117:
						break;
					case 139:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -118:
						break;
					case 141:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -119:
						break;
					case 143:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -120:
						break;
					case 145:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -121:
						break;
					case 147:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -122:
						break;
					case 149:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -123:
						break;
					case 151:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -124:
						break;
					case 153:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -125:
						break;
					case 155:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -126:
						break;
					case 157:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -127:
						break;
					case 159:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -128:
						break;
					case 161:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -129:
						break;
					case 163:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -130:
						break;
					case 165:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -131:
						break;
					case 167:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -132:
						break;
					case 169:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -133:
						break;
					case 171:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -134:
						break;
					case 173:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -135:
						break;
					case 189:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -136:
						break;
					case 190:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -137:
						break;
					case 192:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -138:
						break;
					case 193:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -139:
						break;
					case 196:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -140:
						break;
					case 197:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -141:
						break;
					case 198:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -142:
						break;
					case 199:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -143:
						break;
					case 201:
						{Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(yytext(),
		                    	Pos.linenum,Pos.colnum));}
					case -144:
						break;
					default:
						yy_error(YY_E_INTERNAL,false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
					}
				}
			}
		}
	}
}
